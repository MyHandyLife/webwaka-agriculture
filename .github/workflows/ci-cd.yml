name: WebWaka Agriculture CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds for African time zones
    - cron: '0 2 * * *'  # 2 AM UTC (morning in East Africa)

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: webwaka/agriculture
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # Security and vulnerability scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Backend testing and validation
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: webwaka_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-asyncio
          
      - name: Run database migrations
        run: |
          cd backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/webwaka_test"
          export REDIS_URL="redis://localhost:6379"
          python -m alembic upgrade head
          
      - name: Run backend tests with African context
        run: |
          cd backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/webwaka_test"
          export REDIS_URL="redis://localhost:6379"
          pytest tests/ -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            -m "unit or integration or african_context" \
            --tb=short
            
      - name: Run African network simulation tests
        run: |
          cd backend
          pytest tests/ -v \
            -m "performance and network_simulation" \
            --tb=short
            
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend testing and validation
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml
          
      - name: Install pnpm
        run: npm install -g pnpm
        
      - name: Install dependencies
        run: |
          cd frontend
          pnpm install
          
      - name: Run frontend linting
        run: |
          cd frontend
          pnpm run lint
          
      - name: Run frontend tests
        run: |
          cd frontend
          pnpm run test:coverage
          
      - name: Run accessibility tests
        run: |
          cd frontend
          pnpm run test:a11y
          
      - name: Build frontend for production
        run: |
          cd frontend
          pnpm run build
          
      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Mobile app testing (React Native)
  mobile-tests:
    name: Mobile App Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: mobile/pnpm-lock.yaml
          
      - name: Install pnpm
        run: npm install -g pnpm
        
      - name: Install dependencies
        run: |
          cd mobile
          pnpm install
          
      - name: Run mobile tests
        run: |
          cd mobile
          pnpm run test
          
      - name: Test offline functionality
        run: |
          cd mobile
          pnpm run test:offline
          
      - name: Test African network conditions
        run: |
          cd mobile
          pnpm run test:network-simulation

  # Integration and end-to-end testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: webwaka_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python and Node.js
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          # Backend dependencies
          cd backend
          pip install -r requirements.txt
          
          # Frontend dependencies
          cd ../frontend
          npm install -g pnpm
          pnpm install
          
      - name: Start backend server
        run: |
          cd backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/webwaka_e2e"
          python -m alembic upgrade head
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
      - name: Start frontend server
        run: |
          cd frontend
          pnpm run build
          pnpm run preview --port 3000 &
          sleep 10
          
      - name: Run E2E tests with Playwright
        run: |
          cd tests/e2e
          npx playwright install
          npx playwright test --reporter=html
          
      - name: Test African farmer workflow
        run: |
          cd tests/e2e
          npx playwright test farmer-workflow.spec.js
          
      - name: Test offline synchronization
        run: |
          cd tests/e2e
          npx playwright test offline-sync.spec.js
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: tests/e2e/test-results/

  # Build and push Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, backend-tests, frontend-tests, mobile-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./deployment/docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./deployment/docker/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, e2e-tests]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Configure kubectl for staging
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Deploy to staging cluster
        run: |
          export KUBECONFIG=kubeconfig
          export IMAGE_TAG="${{ github.sha }}"
          envsubst < deployment/kubernetes/staging/kustomization.yaml | kubectl apply -k -
          
      - name: Wait for deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/webwaka-agriculture-backend -n webwaka-staging
          kubectl rollout status deployment/webwaka-agriculture-frontend -n webwaka-staging
          
      - name: Run staging smoke tests
        run: |
          cd tests/smoke
          npm install
          STAGING_URL="${{ secrets.STAGING_URL }}" npm run test

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Configure kubectl for production
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Deploy to production clusters (multi-region)
        run: |
          export KUBECONFIG=kubeconfig
          export IMAGE_TAG="${{ github.sha }}"
          
          # Deploy to West Africa region
          kubectl config use-context west-africa
          envsubst < deployment/kubernetes/production/west-africa/kustomization.yaml | kubectl apply -k -
          
          # Deploy to East Africa region
          kubectl config use-context east-africa
          envsubst < deployment/kubernetes/production/east-africa/kustomization.yaml | kubectl apply -k -
          
          # Deploy to Southern Africa region
          kubectl config use-context southern-africa
          envsubst < deployment/kubernetes/production/southern-africa/kustomization.yaml | kubectl apply -k -
          
      - name: Wait for all regional deployments
        run: |
          export KUBECONFIG=kubeconfig
          
          # Wait for West Africa
          kubectl config use-context west-africa
          kubectl rollout status deployment/webwaka-agriculture-backend -n webwaka-production
          kubectl rollout status deployment/webwaka-agriculture-frontend -n webwaka-production
          
          # Wait for East Africa
          kubectl config use-context east-africa
          kubectl rollout status deployment/webwaka-agriculture-backend -n webwaka-production
          kubectl rollout status deployment/webwaka-agriculture-frontend -n webwaka-production
          
          # Wait for Southern Africa
          kubectl config use-context southern-africa
          kubectl rollout status deployment/webwaka-agriculture-backend -n webwaka-production
          kubectl rollout status deployment/webwaka-agriculture-frontend -n webwaka-production
          
      - name: Run production health checks
        run: |
          cd tests/health
          npm install
          
          # Test all regional endpoints
          WEST_AFRICA_URL="${{ secrets.WEST_AFRICA_URL }}" npm run test:health
          EAST_AFRICA_URL="${{ secrets.EAST_AFRICA_URL }}" npm run test:health
          SOUTHERN_AFRICA_URL="${{ secrets.SOUTHERN_AFRICA_URL }}" npm run test:health
          
      - name: Update deployment status
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 WebWaka Agriculture deployed successfully to production across all African regions!",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {"title": "Version", "value": "${{ github.sha }}", "short": true},
                    {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                    {"title": "Regions", "value": "West, East, Southern Africa", "short": true},
                    {"title": "Status", "value": "✅ Healthy", "short": true}
                  ]
                }
              ]
            }'

  # Performance monitoring and alerting
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run performance tests on production
        run: |
          cd tests/performance
          npm install
          
          # Test African network conditions on production
          PRODUCTION_URL="${{ secrets.PRODUCTION_URL }}" npm run test:2g-network
          PRODUCTION_URL="${{ secrets.PRODUCTION_URL }}" npm run test:3g-network
          PRODUCTION_URL="${{ secrets.PRODUCTION_URL }}" npm run test:4g-network
          
      - name: Generate performance report
        run: |
          cd tests/performance
          npm run generate-report
          
      - name: Upload performance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: tests/performance/reports/

  # Cleanup and maintenance
  cleanup:
    name: Cleanup and Maintenance
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-production, performance-monitoring]
    
    steps:
      - name: Clean up old images
        run: |
          # Clean up images older than 30 days
          echo "Cleaning up old container images..."
          
      - name: Update documentation
        run: |
          echo "Updating deployment documentation..."
          
      - name: Send deployment summary
        run: |
          echo "Sending deployment summary to stakeholders..."

