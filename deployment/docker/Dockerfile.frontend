# WebWaka Agriculture Frontend Dockerfile
# Optimized for African mobile-first deployment

# Build stage
FROM node:20-alpine as builder

# Set environment variables for build optimization
ENV NODE_ENV=production \
    PNPM_HOME="/pnpm" \
    PATH="$PNPM_HOME:$PATH"

# Install pnpm for faster package management
RUN corepack enable

# Set working directory
WORKDIR /app

# Copy package files for better caching
COPY package.json pnpm-lock.yaml ./

# Install dependencies with African network optimization
RUN pnpm install --frozen-lockfile --prod=false

# Copy source code
COPY . .

# Build configuration for African deployment
ENV VITE_AFRICAN_DEPLOYMENT=true \
    VITE_MOBILE_FIRST=true \
    VITE_OFFLINE_FIRST=true \
    VITE_BANDWIDTH_OPTIMIZATION=true \
    VITE_CULTURAL_ADAPTATION=true

# API endpoints for different African regions
ENV VITE_API_BASE_URL_WEST_AFRICA=https://api-west.webwaka.africa \
    VITE_API_BASE_URL_EAST_AFRICA=https://api-east.webwaka.africa \
    VITE_API_BASE_URL_SOUTHERN_AFRICA=https://api-south.webwaka.africa

# African language and cultural support
ENV VITE_SUPPORTED_LANGUAGES="en,sw,ha,yo,ig,am,fr,ar" \
    VITE_DEFAULT_LANGUAGE=en \
    VITE_RTL_LANGUAGES="ar" \
    VITE_CULTURAL_CALENDAR=true

# Performance optimization for African networks
ENV VITE_IMAGE_OPTIMIZATION=true \
    VITE_LAZY_LOADING=true \
    VITE_CODE_SPLITTING=true \
    VITE_COMPRESSION=true \
    VITE_CACHING_STRATEGY=aggressive

# PWA configuration for offline-first
ENV VITE_PWA_ENABLED=true \
    VITE_SW_ENABLED=true \
    VITE_OFFLINE_STORAGE=true \
    VITE_BACKGROUND_SYNC=true

# Build the application with optimizations
RUN pnpm run build

# Production stage
FROM nginx:alpine as production

# Install additional tools for African deployment
RUN apk add --no-cache \
    curl \
    tzdata \
    gzip \
    brotli

# Set African timezone
RUN cp /usr/share/zoneinfo/Africa/Lagos /etc/localtime && \
    echo "Africa/Lagos" > /etc/timezone

# Create nginx user and directories
RUN addgroup -g 1001 -S webwaka && \
    adduser -S webwaka -u 1001 -G webwaka

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration optimized for African networks
COPY deployment/nginx/nginx.conf /etc/nginx/nginx.conf
COPY deployment/nginx/african-optimization.conf /etc/nginx/conf.d/african-optimization.conf

# Copy African-specific static assets
COPY --from=builder /app/public/locales /usr/share/nginx/html/locales
COPY --from=builder /app/public/cultural-assets /usr/share/nginx/html/cultural-assets

# Create nginx configuration for African optimization
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
# WebWaka Agriculture Frontend - African Optimized Configuration

# Upstream API servers for different African regions
upstream api_west_africa {
    server api-west.webwaka.africa:443;
    keepalive 32;
}

upstream api_east_africa {
    server api-east.webwaka.africa:443;
    keepalive 32;
}

upstream api_southern_africa {
    server api-south.webwaka.africa:443;
    keepalive 32;
}

# Rate limiting for African networks
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=static:10m rate=50r/s;

# Main server configuration
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api-*.webwaka.africa wss://api-*.webwaka.africa;" always;
    
    # African network optimizations
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Compression for bandwidth optimization
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Brotli compression for modern browsers
    brotli on;
    brotli_comp_level 6;
    brotli_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Root directory
    root /usr/share/nginx/html;
    index index.html;
    
    # Caching strategy for African networks
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        limit_req zone=static burst=20 nodelay;
    }
    
    # Service Worker for offline functionality
    location /sw.js {
        expires 0;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }
    
    # Manifest for PWA
    location /manifest.json {
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # API proxy with regional routing
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        # Determine region based on client location or preference
        set $api_upstream api_west_africa;
        
        # Route to appropriate regional API
        if ($http_x_user_region = "east") {
            set $api_upstream api_east_africa;
        }
        if ($http_x_user_region = "southern") {
            set $api_upstream api_southern_africa;
        }
        
        proxy_pass https://$api_upstream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts optimized for African networks
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings for mobile networks
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }
    
    # WebSocket support for real-time features
    location /ws/ {
        proxy_pass https://$api_upstream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeouts
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Cultural assets with long caching
    location /cultural-assets/ {
        expires 30d;
        add_header Cache-Control "public";
        add_header Vary "Accept-Encoding";
    }
    
    # Language files with moderate caching
    location /locales/ {
        expires 7d;
        add_header Cache-Control "public";
        add_header Vary "Accept-Encoding";
    }
    
    # SPA fallback for client-side routing
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache HTML files for short duration
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# HTTPS redirect (handled by load balancer in production)
server {
    listen 8080;
    server_name _;
    return 301 https://$host$request_uri;
}
EOF

# Set proper permissions
RUN chown -R webwaka:webwaka /usr/share/nginx/html && \
    chown -R webwaka:webwaka /var/cache/nginx && \
    chown -R webwaka:webwaka /var/log/nginx && \
    chown -R webwaka:webwaka /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown webwaka:webwaka /var/run/nginx.pid

# Health check optimized for African networks
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Switch to non-root user
USER webwaka

# Expose port
EXPOSE 80

# Start nginx with African-optimized configuration
CMD ["nginx", "-g", "daemon off;"]

